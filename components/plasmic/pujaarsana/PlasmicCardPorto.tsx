// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uHdm286nsA1LVw4Z68JgXh
// Component: WGpzMwoiUz
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_pujaarsana.module.css"; // plasmic-import: uHdm286nsA1LVw4Z68JgXh/projectcss
import sty from "./PlasmicCardPorto.module.css"; // plasmic-import: WGpzMwoiUz/css

export type PlasmicCardPorto__VariantMembers = {};
export type PlasmicCardPorto__VariantsArgs = {};
type VariantPropType = keyof PlasmicCardPorto__VariantsArgs;
export const PlasmicCardPorto__VariantProps = new Array<VariantPropType>();

export type PlasmicCardPorto__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicCardPorto__ArgsType;
export const PlasmicCardPorto__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicCardPorto__OverridesType = {
  cardporto?: p.Flex<"div">;
  content?: p.Flex<"div">;
  title?: p.Flex<"h4">;
  desc?: p.Flex<"div">;
};

export interface DefaultCardPortoProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicCardPorto__RenderFunc(props: {
  variants: PlasmicCardPorto__VariantsArgs;
  args: PlasmicCardPorto__ArgsType;
  overrides: PlasmicCardPorto__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"cardporto"}
        data-plasmic-override={overrides.cardporto}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.cardporto
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__ib1Xw)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              loading={"lazy" as const}
            />
          ),

          value: args.children
        })}

        <p.Stack
          as={"div"}
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          hasGap={true}
          className={classNames(projectcss.all, sty.content)}
        >
          <h4
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames(projectcss.all, projectcss.h4, sty.title)}
          >
            {p.renderPlasmicSlot({
              defaultContents: "Nama Project",
              value: args.slot
            })}
          </h4>

          <div
            data-plasmic-name={"desc"}
            data-plasmic-override={overrides.desc}
            className={classNames(projectcss.all, sty.desc)}
          >
            {p.renderPlasmicSlot({
              defaultContents:
                "Enter some textEnter some textEnter some textEnter some textEnter some textEnter some textEnter some text",
              value: args.slot2
            })}
          </div>
        </p.Stack>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  cardporto: ["cardporto", "content", "title", "desc"],
  content: ["content", "title", "desc"],
  title: ["title"],
  desc: ["desc"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  cardporto: "div";
  content: "div";
  title: "h4";
  desc: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCardPorto__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCardPorto__VariantsArgs;
    args?: PlasmicCardPorto__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCardPorto__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCardPorto__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCardPorto__ArgProps,
          internalVariantPropNames: PlasmicCardPorto__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCardPorto__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "cardporto") {
    func.displayName = "PlasmicCardPorto";
  } else {
    func.displayName = `PlasmicCardPorto.${nodeName}`;
  }
  return func;
}

export const PlasmicCardPorto = Object.assign(
  // Top-level PlasmicCardPorto renders the root element
  makeNodeComponent("cardporto"),
  {
    // Helper components rendering sub-elements
    content: makeNodeComponent("content"),
    title: makeNodeComponent("title"),
    desc: makeNodeComponent("desc"),

    // Metadata about props expected for PlasmicCardPorto
    internalVariantProps: PlasmicCardPorto__VariantProps,
    internalArgProps: PlasmicCardPorto__ArgProps
  }
);

export default PlasmicCardPorto;
/* prettier-ignore-end */
